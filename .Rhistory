AIC(b7,b9)
treshold_vif(summary(b9)$r.squared)
#f.LotArea
b10<- lm(log(SalePrice) ~ LotFrontage + log(LotArea) + OverallQual + OverallCond + YearBuilt +
BsmtFinSF1  + log(X1stFlrSF)+ X2ndFlrSF  +
BsmtFullBath + FullBath   + TotRmsAbvGrd+
KitchenAbvGr + Fireplaces + GarageCars  +
ScreenPorch + PoolArea +ExterQual + BsmtQual + KitchenQual+GarageType+f.LotArea
, data = train_new)
#summary(b10)
summary(b10)$r.squared
anova(b7,b10) # not better model
AIC(b7,b10)
treshold_vif(summary(b10)$r.squared)
vif(b10)
b12<- lm(log(SalePrice) ~ LotFrontage + log(LotArea) + OverallQual + OverallCond + YearBuilt +
BsmtFinSF1  + log(X1stFlrSF)+ X2ndFlrSF  +
BsmtFullBath + FullBath   + TotRmsAbvGrd+
KitchenAbvGr + Fireplaces + GarageCars  +
ScreenPorch + PoolArea +ExterQual + BsmtQual + KitchenQual+GarageType+HasPorch_binary
, data = train_new)
#summary(b11)
summary(b11)$r.squared
anova(b7,b11) # a little better model, but not much, we better keep simpler model
AIC(b7,b11)
AIC(b7,b71,b3,b31,b2,b21,b1,b11)
# now we have done a forward stepwise, we can see if we need all the variables doing a backwards stepwise, we can see that in the model: LotFrontage PoolArea and GarageType are less influental, for better explainability we will not consider them in our model.
final_model<-b3
AIC(b7,b71,b3,b31,b2,b21,b1,b11)
final_model<-b1
results <- data.frame(Model = c("Model with train_new sample",
"Model with test_new sample"),
RSQRT = round(c(RSQUARE(exp(fitted(final_model)), train_new$SalePrice),
RSQUARE(exp(predict(final_model, newdata = test_new)), test_new$SalePrice)),2),
RMSE = round(c(rmse(exp(fitted(final_model)), train_new$SalePrice),
rmse(exp(predict(final_model, newdata = test_new)), test_new$SalePrice)),2))
results
mean_hat <- mean(hatvalues(final_model));mean_hat
priori <- which(hatvalues(final_model)>4*mean_hat)
length(priori)
betas <- as.data.frame(dfbetas(final_model))
betas_cutoff <- 2 / sqrt(dim(train_new)[1]);betas_cutoff
influencePlot(final_model, id=list(n=3, method="noteworthy"))
summary(final_model)
plot(final_model)
coefficients <- coef(final_model)
coefficients
AIC(b7,b71,b3,b31,b2,b21,b1,b11)
final_model<-b1
results <- data.frame(Model = c("Model with train_new sample",
"Model with test_new sample"),
RSQRT = round(c(RSQUARE(exp(fitted(final_model)), train_new$SalePrice),
RSQUARE(exp(predict(final_model, newdata = test_new)), test_new$SalePrice)),2),
RMSE = round(c(rmse(exp(fitted(final_model)), train_new$SalePrice),
rmse(exp(predict(final_model, newdata = test_new)), test_new$SalePrice)),2))
results
final_model<-b3
results <- data.frame(Model = c("Model with train_new sample",
"Model with test_new sample"),
RSQRT = round(c(RSQUARE(exp(fitted(final_model)), train_new$SalePrice),
RSQUARE(exp(predict(final_model, newdata = test_new)), test_new$SalePrice)),2),
RMSE = round(c(rmse(exp(fitted(final_model)), train_new$SalePrice),
rmse(exp(predict(final_model, newdata = test_new)), test_new$SalePrice)),2))
results
final_model<-b3
results <- data.frame(Model = c("Model with train_new sample",
"Model with test_new sample"),
RSQRT = round(c(RSQUARE(exp(fitted(final_model)), train_new$SalePrice),
RSQUARE(exp(predict(final_model, newdata = test_new)), test_new$SalePrice)),2),
RMSE = round(c(rmse(exp(fitted(final_model)), train_new$SalePrice),
rmse(exp(predict(final_model, newdata = test_new)), test_new$SalePrice)),2))
results
mean_hat <- mean(hatvalues(final_model));mean_hat
priori <- which(hatvalues(final_model)>4*mean_hat)
length(priori)
betas <- as.data.frame(dfbetas(final_model))
betas_cutoff <- 2 / sqrt(dim(train_new)[1]);betas_cutoff
influencePlot(final_model, id=list(n=3, method="noteworthy"))
llcoo <-c("1424","811","1183")
# residual outliers
llres <- which(abs(rstudent(final_model))>qnorm(0.995));length(llres)
llrem <- unique(c(rownames(train_new)[llres],llcoo)); length(llrem)
llremreg<-which(rownames(train_new)%in%llrem);llremreg
train_new<-train_new[-llremreg,]
final_modelp <- lm(log(SalePrice) ~ LotFrontage + log(LotArea) + OverallQual + OverallCond + YearBuilt +
BsmtFinSF1  + log(X1stFlrSF)+ X2ndFlrSF  +
BsmtFullBath + FullBath   + TotRmsAbvGrd+
KitchenAbvGr + Fireplaces + GarageCars  +
ScreenPorch + PoolArea +ExterQual + BsmtQual + KitchenQual+GarageType
, data = train_new)
summary(final_modelp)
final_modelp <- step( final_modelp, k=log(nrow(train_new)))
par(mfrow=c(2,2))
plot(final_modelp)
coef_orig <- coef(final_model)
coef_filt <- coef(final_modelp)
#common variables
var_com <- intersect(names(coef_orig), names(coef_filt))
coef_orig <- coef_orig[var_com]
coef_filt <- coef_filt[var_com]
coef_comparison <- data.frame(Variable = names(coef_orig),
Original_coefficient = coef_orig,
Filtered_coefficient = coef_filt)
print(coef_comparison)
results <- data.frame(Model = c("Model with train_new sample",
"Model with test_new sample"),
RSQRT = round(c(RSQUARE(exp(fitted(final_modelp)), train_new$SalePrice),
RSQUARE(exp(predict(final_modelp, newdata = test_new)), test_new$SalePrice)),2),
RMSE = round(c(rmse(exp(fitted(final_modelp)), train_new$SalePrice),
rmse(exp(predict(final_modelp, newdata = test_new)), test_new$SalePrice)),2))
results
summary(final_model)
par(mfrow=c(2,2))
plot(final_model)
coefficients <- coef(final_model)
coefficients
#setwd("C:/Users/Silvia/OneDrive - Universitat Politècnica de Catalunya/Escritorio/UPC/MASTER DS/1A/SIM/SIM_assignment_1")
setwd("/Users/ali/Desktop/MASTER/SIM/PROJECT 1")
train<-read.delim("train.csv", sep=',')
shapiro.test(log(train$SalePrice))
shapiro.test(train$SalePrice)
shapiro.test(log(train$SalePrice))
qqnorm(train$SalePrice)
hist(train$SalePrice, prob = TRUE, col = 'lightblue', main = 'SalePrice Distribution', xlab = 'SalePrice')
lines(density(train$SalePrice), col = 'red', lwd = 2)
summary(train2$BsmtFullBath)
mod.fow <- stats::step(lm(SalePrice~. , data = train_new), trace = FALSE,
direction = "forward")
numeric_description(train2$OpenPorchSF, 30)
knitr::opts_chunk$set(echo = TRUE)
summary(final_modelp)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(skimr)
library(FactoMineR)
library(car)
library(lmtest)
library(ISLR)
library(arm)
library(mice)
library(corrplot)
library(chemometrics)
library(dplyr)
library(caret)
library(FactoMineR)
library(corrplot)
rm(list=ls())
par(mfrow=c(1,1))
#setwd("C:/Users/Silvia/OneDrive - Universitat Politècnica de Catalunya/Escritorio/UPC/MASTER DS/1A/SIM/SIM_assignment_1")
setwd("/Users/ali/Desktop/MASTER/SIM/PROJECT 1")
train<-read.delim("train.csv", sep=',')
dim(train)
str(train)
train$Alley[which(is.na(train$Alley))] <- "No alley access"
train$BsmtQual[which(is.na(train$BsmtQual))] <- "No Basement"
train$BsmtCond[which(is.na(train$BsmtCond))] <- "No Basement"
train$BsmtExposure[which(is.na(train$BsmtExposure))] <- "No Basement"
train$BsmtFinType1[which(is.na(train$BsmtFinType1))] <- "No Basement"
train$BsmtFinType2[which(is.na(train$BsmtFinType2))] <- "No Basement"
train$FireplaceQu[which(is.na(train$FireplaceQu))] <- "No Fireplace"
train$GarageType[which(is.na(train$GarageType))] <- "No Garage"
train$GarageFinish[which(is.na(train$GarageFinish))] <- "No Garage"
train$GarageCond[which(is.na(train$GarageCond))] <- "No Garage"
train$PoolQC[which(is.na(train$PoolQC))] <- "No Pool"
train$Fence[which(is.na(train$Fence))] <- "No Fence"
train$MiscFeature[which(is.na(train$MiscFeature))] <- "None"
# Recode: character to factor
char_cols <- which(sapply(train, is.character))
train[, char_cols] <- lapply(train[, char_cols], as.factor)
# Recode: numeric to factor
train$MSSubClass <- factor(train$MSSubClass)
train$MoSold <- factor(train$MoSold) # month
res.con <- condes(train,81)
head(res.con$quali)
shapiro.test(train$SalePrice)
par(mfrow=c(1,2))
shapiro.test(log(train$SalePrice)) # log-normality
qqnorm(train$SalePrice)
qqline(train$SalePrice)
hist(train$SalePrice, prob = TRUE, col = 'lightblue', main = 'SalePrice Distribution', xlab = 'SalePrice')
lines(density(train$SalePrice), col = 'red', lwd = 2)
vect<-row.names(res.con$quali)
vect[1:10]
factor_train<-train[,c(vect[1:10])]
num_cols <- names(train)[sapply(train, is.numeric)]
train2 <- train[,c(num_cols, vect[1:10])]
numeric_description <- function(variable, n_breaks) {
#cat("Summary:\n")
#print(summary(variable))
cat("Count of missing values:",sum(is.na(variable)),"\n")
column_name <- sub(".+\\$", "", deparse(substitute(variable)))
hist(variable, breaks = n_breaks, freq = F, main = paste("Histogram of", column_name), xlab = column_name)
curve(dnorm(x, mean(variable), sd(variable)), add = T)
print(shapiro.test(variable))
}
analyze_outliers <- function(data, column_name) {
sm <- summary(data[[column_name]])
iqr <- sm["3rd Qu."] - sm["1st Qu."]
# Mild Outliers
mild_ub <- sm["3rd Qu."] + 1.5 * iqr
mild_lb <- sm["1st Qu."] - 1.5 * iqr
mild_outliers <- length(which(data[[column_name]] > mild_ub | data[[column_name]] < mild_lb))
cat("Number of mild outliers:", mild_outliers, "\n")
Boxplot(data[[column_name]], main = paste("Outlier Analysis for", column_name),
ylab = column_name, outline = TRUE)
abline(h = mild_ub, col = "orange", lwd = 2)
abline(h = mild_lb, col = "orange", lwd = 2)
# Severe Outliers
severe_ub <- sm["3rd Qu."] + 3 * iqr
severe_lb <- sm["1st Qu."] - 3 * iqr
severe_outliers <- length(which(data[[column_name]] > severe_ub | data[[column_name]] < severe_lb))
cat("Number of severe outliers:", severe_outliers, "\n")
abline(h = severe_ub, col = "red", lwd = 2.5)
abline(h = severe_lb, col = "red", lwd = 2.5)
}
train2$univ_outl_count <- 0 # new column count outliers - initialize
update_outliers_count <- function(dataframe, column_name) {
df <- dataframe
sm <- summary(df[[column_name]])
iqr <- sm["3rd Qu."] - sm["1st Qu."]
severe_ub <- sm["3rd Qu."] + 3 * iqr
severe_lb <- sm["1st Qu."] - 3 * iqr
severe_outliers_id <- which(df[[column_name]] > severe_ub | df[[column_name]] < severe_lb)
df$univ_outl_count[severe_outliers_id] <- df$univ_outl_count[severe_outliers_id] + 1
return(df)
}
skim(train2) # overall exploration
summary(train2)
#names(train2)
par(mfrow=c(1,2))
numeric_description(train2$LotFrontage, 30) # not normal distribution
analyze_outliers(train2, "LotFrontage")
train2 <- update_outliers_count(train2, "LotFrontage")
par(mfrow=c(1,3))
numeric_description(train2$LotArea, 20) # not normal distribution
analyze_outliers(train2, "LotArea")
train2 <- update_outliers_count(train2, "LotArea")
# new variable:
sm<-summary(train2$LotArea)
plot(train2$LotArea,train2$SalePrice)
iqr <- sm["3rd Qu."] - sm["1st Qu."]
mild_ub <- sm["3rd Qu."] + 1.5 * iqr
mild_lb <- sm["1st Qu."] - 1.5 * iqr
train2$f.LotArea <- ifelse(train2$LotArea <= mild_lb, 1,
ifelse(train2$LotArea > mild_lb & train2$LotArea < mild_ub, 2,
ifelse(train2$LotArea >= mild_ub, 3, NA)))
train2$f.LotArea<- factor(train2$f.LotArea, labels=c("LowLotArea","MidLotArea","HighLotArea"), order = T, levels=c(1,2,3))
#table(train2$f.LotArea)
par(mfrow=c(1,2))
numeric_description(train2$OverallQual, 10) # not normal distribution
analyze_outliers(train2, "OverallQual")
train2 <- update_outliers_count(train2, "OverallQual")
summary(train2$YearBuilt)
par(mfrow=c(1,2))
barplot(table(train2$YearBuilt), main = "Distribution of Year Built",xlab = "Year",col = "skyblue")
sum(is.na(train2$YearBuilt))
analyze_outliers(train2, "YearBuilt")
train2 <- update_outliers_count(train2, "YearBuilt")
summary(train2$YearRemodAdd)
barplot(table(train2$YearRemodAdd), main = "Distribution of Year Remodelized",xlab = "Year",col = "skyblue")
sum(is.na(train2$YearRemodAdd))
analyze_outliers(train2, "YearRemodAdd")
train2 <- update_outliers_count(train2, "YearRemodAdd")
par(mfrow=c(1,2))
numeric_description(train2$MasVnrArea, 10)# not normal distribution
analyze_outliers(train2,"MasVnrArea")
train2 <- update_outliers_count(train2, "MasVnrArea")
# find values that are NA instead of 0
# if it has a material but a 0 in masvnrarea is a NA
train2$MasVnrArea[which(train2$MasVnrArea == 0)] <- NA
none_idx <- which(train$MasVnrType == 'None')
train2$MasVnrArea[none_idx] <- 0
par(mfrow=c(1,2))
numeric_description(train2$BsmtFinSF1, 10)# not normal distribution
analyze_outliers(train2,"BsmtFinSF1")
train2 <- update_outliers_count(train2, "BsmtFinSF1")
par(mfrow=c(1,2))
numeric_description(train2$BsmtFinSF2, 10) # not normal distribution
analyze_outliers(train2,"BsmtFinSF2")
train2 <- update_outliers_count(train2, "BsmtFinSF2")
par(mfrow=c(1,2))
numeric_description(train2$BsmtUnfSF, 20) # not normal distribution
analyze_outliers(train2,"BsmtUnfSF")
train2 <- update_outliers_count(train2, "BsmtUnfSF")
par(mfrow=c(1,2))
numeric_description(train2$TotalBsmtSF, 10)# not normal distribution
analyze_outliers(train2,"TotalBsmtSF")
train2 <- update_outliers_count(train2, "TotalBsmtSF")
par(mfrow=c(1,2))
numeric_description(train2$X1stFlrSF, 10) # not normal distribution
analyze_outliers(train2,"X1stFlrSF")
train2 <- update_outliers_count(train2, "X1stFlrSF")
par(mfrow=c(1,2))
numeric_description(train2$X2ndFlrSF, 10)# not normal distribution
analyze_outliers(train2,"X2ndFlrSF")
train2 <- update_outliers_count(train2, "X2ndFlrSF")
# create a new variable if has second floor = 1 / no second floor = 0.
train2$secondfloor<-0
train2$secondfloor[which(train2$X2ndFlrSF!=0)]<-1
train2$secondfloor<-factor(train2$secondfloor)
table(train2$secondfloor)
par(mfrow=c(1,2))
numeric_description(train2$LowQualFinSF, 10) # not normal distribution
#table(train2$LowQualFinSF)# very centered in 0
analyze_outliers(train2,"LowQualFinSF")
nearZeroVar(train2$LowQualFinSF, saveMetrics = TRUE) # Variable with near zero variance
train2 <- update_outliers_count(train2, "LowQualFinSF")
par(mfrow=c(1,2))
numeric_description(train2$GrLivArea, 20) # not normal distribution
analyze_outliers(train2,"GrLivArea")
train2 <- update_outliers_count(train2, "GrLivArea")
summary(train2$BsmtFullBath)
par(mfrow=c(1,2))
analyze_outliers(train2,"BsmtFullBath")
train2 <- update_outliers_count(train2, "BsmtFullBath")
#table(train2$BsmtFullBath)
sum(is.na(train2$BsmtFullBath))
barplot(table(train2$BsmtFullBath), main = "Distribution of Baths in the basement",xlab = "Number of Baths",col = "skyblue")
summary(train2$BsmtHalfBath)
analyze_outliers(train2,"BsmtHalfBath")
train2 <- update_outliers_count(train2, "BsmtHalfBath")
table(train2$BsmtHalfBath) # very centered in 0
nearZeroVar(train2$BsmtHalfBath, saveMetrics = TRUE) # Variable not with near zero variance
sum(is.na(train2$BsmtHalfBath))
barplot(table(train2$BsmtHalfBath), main = "Distribution of Half Baths in the basement",xlab = "Number of Baths",col = "skyblue")
summary(train2$FullBath)
par(mfrow=c(1,2))
analyze_outliers(train2,"FullBath")
train2 <- update_outliers_count(train2, "FullBath")
table(train2$FullBath)
sum(is.na(train2$FullBath))
barplot(table(train2$FullBath), main = "Distribution of Baths above grade",xlab = "Number of Baths",col = "skyblue")
summary(train2$HalfBath)
par(mfrow=c(1,2))
analyze_outliers(train2,"HalfBath")
train2 <- update_outliers_count(train2, "HalfBath")
table(train2$HalfBath)
sum(is.na(train2$HalfBath))
barplot(table(train2$HalfBath), main = "Distribution of Half Baths above grade",xlab = "Number of Baths",col = "skyblue")
summary(train2$BedroomAbvGr)
par(mfrow=c(1,2))
analyze_outliers(train2,"BedroomAbvGr")
train2 <- update_outliers_count(train2, "BedroomAbvGr")
table(train2$BedroomAbvGr)
sum(is.na(train2$BedroomAbvGr))
barplot(table(train2$BedroomAbvGr), main = "Distribution of Bedrooms above grade",xlab = "Number of Bedrooms",col = "skyblue")
summary(train2$KitchenAbvGr)
par(mfrow=c(1,2))
analyze_outliers(train2,"KitchenAbvGr")
train2 <- update_outliers_count(train2, "KitchenAbvGr")
sum(is.na(train2$KitchenAbvGr))
barplot(table(train2$KitchenAbvGr), main = "Distribution of Kitchens",xlab = "Number of Kitchens",col = "skyblue")
table(train2$KitchenAbvGr) # variable very centered in 1
nearZeroVar(train2$KitchenAbvGr,saveMetrics = TRUE) # near zero variance
par(mfrow=c(1,2))
summary(train2$TotRmsAbvGrd)
analyze_outliers(train2,"TotRmsAbvGrd")
train2 <- update_outliers_count(train2, "TotRmsAbvGrd")
#table(train2$TotRmsAbvGrd)
sum(is.na(train2$TotRmsAbvGrd))
summary(train2$Fireplaces)
par(mfrow=c(1,2))
#table(train2$Fireplaces)
sum(is.na(train2$Fireplaces))
analyze_outliers(train2, "Fireplaces")
train2 <- update_outliers_count(train2, "Fireplaces")
barplot(table(train2$Fireplaces), main = "Distribution of fireplaces",xlab = "Number of Fireplaces",col = "skyblue")
summary(train2$GarageCars)
#table(train2$GarageCars)
sum(is.na(train2$GarageCars)) #0
par(mfrow=c(1,2))
analyze_outliers(train2, "GarageCars")
train2 <- update_outliers_count(train2, "GarageCars")
barplot(table(train2$GarageCars), main = "Distribution of Garage Cars",xlab = "Number of Garage Cars",col = "skyblue")
par(mfrow=c(1,2))
numeric_description(train2$GarageArea, 30) # not normal distribution
analyze_outliers(train2, "GarageArea")
train2 <- update_outliers_count(train2, "GarageArea")
sm<-summary(train2$GarageArea)
# checking if 0 mean that they don't have garage
which(train$GarageCars == 0)
which(train$GarageArea == 0)
which(train$GarageFinish=='No Garage')
par(mfrow=c(1,2))
numeric_description(train2$WoodDeckSF, 30) # not normal distribution
#table(train2$WoodDeckSF) # centered data in 0
analyze_outliers(train2, "WoodDeckSF")
train2 <- update_outliers_count(train2, "WoodDeckSF")
numeric_description(train2$OpenPorchSF, 30)
par(mfrow=c(1,2))
analyze_outliers(train2,"OpenPorchSF")
train2 <- update_outliers_count(train2, "OpenPorchSF")
#table(train2$OpenPorchSF) # very centered data in 0
train2$OpenPorch_binary<-0
train2$OpenPorch_binary[which(train2$OpenPorchSF!=0)]<-1
train2$OpenPorch_binary<-as.factor(train2$OpenPorch_binary)
table(train2$OpenPorch_binary)
numeric_description(train2$EnclosedPorch, 30)
par(mfrow=c(1,2))
analyze_outliers(train2,"EnclosedPorch")
train2 <- update_outliers_count(train2, "EnclosedPorch")
#table(train2$EnclosedPorch) # very centered data in 0
# therefore we will create a factor 0 if they dont have enclosed porch area,1 if they do have.
train2$EnclosedPorch_binary<-0
train2$EnclosedPorch_binary[which(train2$EnclosedPorch!=0)]<-1
train2$EnclosedPorch_binary<-as.factor(train2$EnclosedPorch_binary)
#table(train2$EnclosedPorch_binary)
# create new variable - has porch or not - mixing both binary variables
train2$HasPorch_binary<-0
train2$HasPorch_binary[which(train2$EnclosedPorch!=0 | train2$OpenPorchSF!=0)]<-1
train2$HasPorch_binary<-as.factor(train2$HasPorch_binary)
table(train2$HasPorch_binary)
par(mfrow=c(1,2))
numeric_description(train2$X3SsnPorch, 30)
#table(train2$X3SsnPorch) # very centered in 0 -> dont have three season porch
analyze_outliers(train2,"X3SsnPorch")
train2 <- update_outliers_count(train2, "X3SsnPorch")
par(mfrow=c(1,2))
numeric_description(train2$ScreenPorch, 30) # not normally distributed
#table(train2$ScreenPorch) # very centered in 0 -> dont have screen porch
analyze_outliers(train2,"ScreenPorch")
train2 <- update_outliers_count(train2, "ScreenPorch")
par(mfrow=c(1,2))
numeric_description(train2$PoolArea, 30)# not normally distributed
#table(train2$PoolArea) # very centered in 0 -> dont have pool
analyze_outliers(train2,"PoolArea")
train2 <- update_outliers_count(train2, "PoolArea")
# create a new variable : 0=no pool/1= pool
train2$Pool_binary<-0
train2$Pool_binary[which(train2$PoolArea!=0)]<-1
train2$Pool_binary<-as.factor(train2$Pool_binary)
table(train2$Pool_binary) # not very usefull , the majority dont have pools, very centered
#train2$Pool_binary<-NULL
par(mfrow=c(1,2))
numeric_description(train2$MiscVal, 30) # not normally distributed
#table(train2$MiscVal) # very centered in 0
analyze_outliers(train2,"MiscVal")
train2 <- update_outliers_count(train2, "MiscVal")
par(mfrow=c(1,2))
barplot(table(train2$YrSold), main = "Distribution of YrSold",xlab = "Number of Garage Cars",col = "skyblue")
analyze_outliers(train2,"YrSold")
train2 <- update_outliers_count(train2, "YrSold")
par(mfrow=c(1,2))
sum(is.na(train2$Neighborhood)) #0
#table(train2$Neighborhood)
barplot(table(train2$Neighborhood), main = "Distribution of Neighborhood",xlab = "Number of Neighborhood",col = "skyblue")
pie(table(train2$Neighborhood), main = "Distribution of Neighborhood", col = rainbow(length(levels(train2$Neighborhood))))
par(mfrow=c(1,1))
sum(is.na(train2$ExterQual)) #0
#table(train2$ExterQual)
barplot(table(train2$ExterQual), main = "Distribution of the exterior material quality",xlab = "Qualification",col = "skyblue")
sum(is.na(train2$BsmtQual)) #0
#table(train2$BsmtQual)
barplot(table(train2$BsmtQual), main = "Distribution of Basement height Quality",xlab = "Qualification",col = "skyblue")
sum(is.na(train2$KitchenQual)) #0
#table(train2$KitchenQual)
barplot(table(train2$KitchenQual), main = "Distribution of Kitchen Quality",xlab = "Qualification",col = "skyblue")
sum(is.na(train2$GarageFinish)) #0
#table(train2$GarageFinish)
barplot(table(train2$GarageFinish), main = "Garage Finish Distribution",xlab = "Type",col = "skyblue")
sum(is.na(train2$FireplaceQu)) #0
#table(train2$FireplaceQu)
barplot(table(train2$FireplaceQu), main = "Fireplace quality Distribution",xlab = "Qualification",col = "skyblue")
sum(is.na(train2$Foundation)) #0
#table(train2$Foundation)
barplot(table(train2$Foundation), main = "Type of foundation Distribution",xlab = "Type",col = "skyblue")
sum(is.na(train2$GarageType)) #0
#table(train2$GarageType)
barplot(table(train2$GarageType), main = "Garage Location Distribution",xlab = "Garage Location",col = "skyblue")
sum(is.na(train2$MSSubClass)) #0
#table(train2$MSSubClass) # +classes
barplot(table(train2$MSSubClass), main = "MSSubClass Distribution",xlab = "MSSubClass",col = "skyblue")
#skim(train2)
sum(is.na(train2$LotFrontage))
sum(is.na(train2$MasVnrArea))
sum(is.na(train2$GarageYrBlt))
mice_imp<-mice(train2[, !names(train2) %in% "GarageYrBlt"],method = "cart")
imputed_data<-complete(mice_imp)
# LotFrontage validation
summary(imputed_data$LotFrontage)
summary(train2$LotFrontage)
par(mfrow=c(1,2))
plot(density(train2$LotFrontage,na.rm=TRUE))
plot(density(imputed_data$LotFrontage,na.rm=TRUE))
par(mfrow=c(1,1))
# MasVnrArea validation
summary(imputed_data$MasVnrArea)
summary(train2$MasVnrArea)
par(mfrow=c(1,2))
plot(density(train2$MasVnrArea,na.rm=TRUE))
plot(density(imputed_data$MasVnrArea,na.rm=TRUE))
par(mfrow=c(1,1))
max(imputed_data$univ_outl_count)
ind_delete<-imputed_data[which(imputed_data$univ_outl_count > 3),]
imputed_data<-imputed_data[-c(ind_delete)$Id,]
cols <- num_cols[! num_cols %in% c("Id","GarageYrBlt")]
df_of_interest <- imputed_data[,c(cols,"univ_outl_count")]
cor_outl = cor(df_of_interest)
par(mfrow=c(1,1))
corrplot(cor_outl, method = 'color')
#cor_outl[34, ]
colnames(cor_outl)[which.min(cor_outl[34, ])];min(cor_outl[34, ])
colnames(cor_outl)[which.max(cor_outl[34,1:33])];max(cor_outl[34,1:33])
# 1. All variable with similar high unique values
n_cols <- names(imputed_data)[sapply(imputed_data, is.numeric)]
n_cols <- n_cols[n_cols != "Id"]
df_of_interest <- imputed_data[,c(n_cols)]
threshold <- 40
df_cols <- sapply(df_of_interest, function(x) length(unique(x)) > threshold)
df_of_interest <- df_of_interest[, df_cols]
names(df_of_interest)
res.out = Moutlier(df_of_interest[, !(names(df_of_interest) %in% c("MasVnrArea","BsmtFinSF1", "BsmtFinSF2", "X2ndFlrSF", "WoodDeckSF", "EnclosedPorch", "ScreenPorch"))], quantile = 0.9995, col="green")
